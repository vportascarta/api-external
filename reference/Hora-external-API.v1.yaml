openapi: 3.0.0
info:
  title: Hora external API
  version: '1.0'
  contact:
    name: Timesphere
    url: 'https://timesphere.com'
    email: support@timesphere.com
  description: Hora External API Docs
servers:
  - url: 'https://company.timesphere.com/rest'
    description: REST Endpoint
paths:
  /employee:
    get:
      summary: Get one employee
      tags:
        - employee
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employee'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
                description: The error encountered by the server
      operationId: get-employee
      description: Get one employee
      parameters:
        - schema:
            type: string
          in: query
          name: employeeId
          description: Id of an valid employee
          required: true
        - schema:
            type: string
          in: query
          name: companyCode
          description: The employee company (for multi company setup)
      security:
        - 'Bearer <api_key>': []
    parameters: []
  /employee/all:
    get:
      summary: Get all employee
      tags:
        - employee
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/employee'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
                description: The error encountered by the server
      operationId: get-employee-all
      description: Get all employees
      security:
        - 'Bearer <api_key>': []
      parameters:
        - schema:
            type: string
          in: query
          name: companyCode
          description: The employee company (for multi company setup)
  /schedule/all:
    get:
      summary: Get all schedule for one week
      tags:
        - schedule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/schedule'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
                description: The error encountered by the server
      operationId: get-schedule-all
      security:
        - 'Bearer <api_key>': []
      parameters:
        - schema:
            type: string
          in: query
          name: companyCode
          description: The employee company (for multi company setup)
        - schema:
            type: string
            pattern: "^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$"
          in: query
          name: date
          description: One day of the wanted week (ISO DATE)
          required: true
  /schedule:
    get:
      summary: Get one employee schedule for one week
      tags:
        - schedule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schedule'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
                description: The error encountered by the server
      operationId: get-schedule
      security:
        - 'Bearer <api_key>': []
      requestBody: {}
      parameters:
        - schema:
            type: string
          in: query
          name: employeeId
          description: Id of an valid employee
          required: true
        - schema:
            type: string
          in: query
          name: companyCode
          description: The employee company (for multi company setup)
        - schema:
            type: string
            pattern: "^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$"
          in: query
          name: date
          description: One day of the wanted week (ISO DATE)
          required: true
      description: get the schedule (1 week) of one employee
  /requirement:
    get:
      summary: Get requirement by day
      tags:
        - requirement
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requirement'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
                description: The error encountered by the server
        '':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requirement'
          description: ''
      operationId: get-requirement
      security:
        - 'Bearer <api_key>': []
      parameters:
        - schema:
            type: string
            pattern: "^\\d{4}-([0]\\d|1[0-2])-([0-2]\\d|3[01])$"
          in: query
          name: date
          description: Wanted day (ISO DATE)
          required: true
        - schema:
            type: string
          in: query
          name: companyCode
          description: The employee company (for multi company setup)
components:
  schemas:
    employee:
      title: Employee
      type: object
      x-examples: {}
      description: ''
      x-tags:
        - employee
      properties:
        id:
          type: string
          description: System id
        displayId:
          type: string
          description: Id displayed on screen
        firstName:
          type: string
          description: ''
        lastName:
          type: string
          description: ''
        hiringDate:
          type: string
          format: date-time
          description: ISO Date Time
        seniorityDate:
          type: string
          format: date-time
          description: ISO Date Time
        gender:
          type: string
          enum:
            - M
            - F
          description: ''
        status:
          type: string
        affiliation:
          type: string
        baseDivision:
          type: string
        address:
          type: string
        homePhone:
          type: string
        cellularPhone:
          type: string
        email:
          type: string
          format: email
        information:
          type: string
        externalId:
          type: string
          description: Id used with external systems
        skills:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            type: string
        wageType:
          type: string
          enum:
            - HOURLY
            - WEEKLY
        wage:
          type: number
          format: float
          example: '40'
          minimum: 0
          maximum: 1000000
      required:
        - id
        - displayId
        - wage
    need:
      title: Need
      type: object
      x-tags:
        - requirement
      properties:
        onSchedule:
          type: number
          format: float
          example: '2'
          minimum: 0
          maximum: 1000
        required:
          type: number
          format: float
          example: '6'
          minimum: 0
          maximum: 1000
      required:
        - onSchedule
        - required
    shift:
      title: Shift
      type: object
      properties:
        division:
          type: string
        affectation:
          type: string
        source:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/task'
      required:
        - division
        - affectation
        - start
        - end
      x-tags:
        - schedule
    task:
      title: Task
      type: object
      x-tags:
        - schedule
      properties:
        name:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        duration:
          type: number
          description: milliseconds
          format: float
          example: '15'
          minimum: 0
          maximum: 86400000
        labels:
          type: array
          items:
            type: string
    schedule:
      title: Schedule
      type: object
      properties:
        employeeId:
          type: string
        shifts:
          type: array
          items:
            $ref: '#/components/schemas/shift'
      x-tags:
        - schedule
    requirement:
      title: Requirement
      type: object
      description: ''
      x-tags:
        - requirement
      properties:
        discretization:
          type: number
          description: millisseconds
          format: float
          example: '30'
          minimum: 0
          maximum: 86400000
        start:
          type: string
          format: date-time
        requirements:
          type: array
          items:
            type: object
            properties:
              division:
                type: string
              affectation:
                type: string
              needs:
                type: array
                items:
                  $ref: '#/components/schemas/need'
      required:
        - discretization
  securitySchemes:
    'Bearer <api_key>':
      name: Authorization
      type: apiKey
      in: header
